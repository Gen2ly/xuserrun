#!/bin/bash
# Run a command as the currently active X.org server user

# Display usage if no parameters given
if [[ -z "$@" ]]; then
  echo "${0##*/} [program] [--options*] [...*] - run a program as the X.org server user"
  exit 1; fi

# Programs existence check
for prog in loginctl "$1"; do
  if ! hash $prog 2>&- /dev/null; then
    echo "${0##*/}: non-existent program or not installed: "$prog"" && \
    non_prog=yes; fi; done
    [[ $non_prog = yes ]] && exit 1

# Discover DISPLAY and USER values (from first)
actv_sesss=$(loginctl list-sessions --no-legend | awk '{ print $1 }')
for session in ${actv_sesss[@]}; do
  sess_clas=$(loginctl show-session $session -p Class 2>/dev/null | cut -d= -f2)
  sess_disp=$(loginctl show-session $session -p Display 2>/dev/null | cut -d= -f2)
  sess_user=$(loginctl show-session $session -p Name    2>/dev/null | cut -d= -f2)
  [[ $sess_clas = user && $sess_disp = :[[0-9] ]] && break; done

# Exit if no X.org server is running
[[ $sess_disp != :[0-9] ]] && \
{ echo "${0##*/}: no X.org server detected running"; exit 1; }

# Methods of running command as another user: http://tinyurl.com/lddsctk
# Why printf is necessary                   : http://tinyurl.com/n796wcf
if   [[ $EUID -eq 0 ]]; then
  su $sess_user - -c "XAUTHORITY=~$sess_user/.Xauthority \
    DISPLAY=$sess_disp $(printf '%q ' "$@")" &
elif [[ $sess_user != $USER ]]; then
  su $sess_user - -c "XAUTHORITY=~$sess_user/.Xauthority \
    DISPLAY=$sess_disp $(printf '%q ' "$@")" &
else
  XAUTHORITY=~$sess_user/.Xauthority DISPLAY=$sess_disp "$@" &
fi
